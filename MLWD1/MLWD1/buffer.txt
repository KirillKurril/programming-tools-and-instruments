private async void StartClicked(object sender, EventArgs e)
{
    label.Text = "Вычисление";
    startButton.IsEnabled = false;
    cancelButton.IsEnabled = true;

    cancellationTokenSource = new CancellationTokenSource();
    CancellationToken cancellationToken = cancellationTokenSource.Token;

    double result = await CalculateIntegrationAsync(cancellationToken);

    if (!cancellationToken.IsCancellationRequested)
    {
        label.Text = result.ToString();
    }
    else
    {
        label.Text = "Задание отменено";
    }

    progressBar.Progress = 0;
    startButton.IsEnabled = true;
    cancelButton.IsEnabled = false;
}

private void CancelClicked(object sender, EventArgs e)
{
    cancellationTokenSource?.Cancel();
    cancelButton.IsEnabled = false;
}

private async Task<double> CalculateIntegrationAsync(CancellationToken cancellationToken)
{
    double step = 0.001;
    double result = 0;

    for (double x = 0; x < 1; x += step)
    {
        result += Math.Sin(x) * step;
        progressBar.Progress = x;
        percentage.Text = Convert.ToInt16(x * 100).ToString() + "%";
        // Ожидание для обновления прогресса на ProgressBar
        await Task.Delay(10);

        if (cancellationToken.IsCancellationRequested)
        {
            break;
        }
    }

    return result;
}